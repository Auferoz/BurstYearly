---
export const prerender = true;

import { getCollection, render } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import NavHeader from "../../components/NavHeader.astro";

import IconPlayerPlay from "../../icons/PlayerPlay.astro";
import IconCalendarCheck from "../../icons/CalendarCheck.astro";
import IconTagsIcon from "../../icons/TagsIcon.astro";
import IconNetwork from "../../icons/Network.astro";
import IconDeviceGamepad from "../../icons/DeviceGamepad.astro";
import IconStopwatch from "../../icons/Stopwatch.astro";
import IconCircleDashed from "../../icons/CircleDashed.astro";
import IconTrophy from "../../icons/Trophy.astro";
import IconNumber from "../../icons/Number.astro";
import IconCalendarTime from "../../icons/CalendarTime.astro";
import IconPuzzle from "../../icons/Puzzle.astro";

export async function getStaticPaths() {
    const games = await getCollection("games");

    return games.map((game: { slug: any; }) => ({
        params: { id: game.slug },
        props: { game }
    }))
}

const { game } = Astro.props
const { slug, data } = game
const { title, released, companie, poster, genre, estado, horas, logros_obt, logros_total, console_pc, igdbId, dates_played } = data
const { Content } = await render(game)

// Definimos un valor por defecto para year en SSG
const defaultYear = "2025";
const defaultYearKey = `y${defaultYear}`;

const ImgUrl = "https://images.igdb.com/igdb/image/upload/t_1080p/";

let percentTrofeos;
if (logros_obt === 0 && logros_total === 0) {
    percentTrofeos = 100;
} else {
    percentTrofeos = Math.round((logros_obt / logros_total) * 100);
}

const estadoStyles = {
    completado: { className: 'completadoColorBg', iconColor: '#2973B2' },
    pausado: { className: 'pausadoColorBg', iconColor: '#FFD65A' },
    jugando: { className: 'jugandoColorBg', iconColor: '#16C47F' },
    abandonado: { className: 'abandonadoColorBg', iconColor: '#D84040' }
};

const currentEstado = estadoStyles[estado.toLowerCase()] || { className: 'defaultColorBg', iconColor: '#FFFFFF' };

const estadoStyle = currentEstado.iconColor;

---

<Layout title={`${title} - BURST`}>
    <main class="w-full">

        <NavHeader />
        
        <section class="p-4 mx-auto max-w-screen-xl">
            <div class="flex gap-4 flex-col lg:flex-row">

                <aside class="flex flex-col items-center w-full">
                    <img transition:name={`img-${slug}`} src={ImgUrl + poster} alt={title} class="rounded-xl w-72 h-auto w-full">
                </aside>

                <main class="max-w-2xl prose prose-invert">

                    <div class="bg-[#1b1e25] p-4 rounded-xl mb-3">
                        <h1 class="flex items-center gap-2 text-2xl font-bold mb-4">
                            {title}
                            <IconPlayerPlay width="30" height="30" stroke={estadoStyle} />
                        </h1>

                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconNumber width="20" height="20" /></span>
                            <span class="font-bold">igdbId:</span> 
                            {igdbId}
                        </li>
                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconCalendarCheck width="20" height="20" /></span>
                            <span class="font-bold"> Lanzamiento: </span> 
                            {released}
                        </li>
                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconNetwork width="20" height="20" /></span>
                            <span class="font-bold">Compañía:</span> 
                            {companie}
                        </li>
                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconTagsIcon width="20" height="20" /></span>
                            <span class="font-bold ">Generos:</span> 
                            <span class="truncate">{genre}</span>
                        </li>
                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconDeviceGamepad width="20" height="20" /></span>
                            <span class="font-bold">Consola/PC:</span> 
                            {console_pc}
                        </li>
                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconCircleDashed width="20" height="20" /></span>
                            <span class="font-bold">Estado:</span> 
                            {estado}
                        </li>
                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconStopwatch width="20" height="20" /></span>
                            <span class="font-bold">Horas jugadas:</span> 
                            {horas} hrs
                        </li>
                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconCalendarTime width="20" height="20" /></span>
                            <span class="font-bold">Fecha de inicio:</span> 
                            <!-- Se asigna id para actualización en cliente -->
                            <span id="fecha_inicio">{dates_played[defaultYearKey]?.fecha_inicio}</span>
                        </li>
                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconCalendarTime width="20" height="20" /></span>
                            <span class="font-bold">Fecha de finalización:</span> 
                            <!-- Se asigna id para actualización en cliente -->
                            <span id="fecha_final">{dates_played[defaultYearKey]?.fecha_final ? dates_played[defaultYearKey]?.fecha_final : "En progreso"}</span>
                        </li>

                        <!-- <article>
                            <div class="w-full bg-gray-200 rounded-md dark:bg-gray-700">
                                <div class={`bar ${currentEstado.className} text-md font-medium text-white text-center p-0.5 leading-none rounded-md flex items-center justify-center font-mono`} style={`width: 30%;`}> 30 Dias </div>
                            </div>
                        </article> -->

                        <li class="flex items-center gap-2">
                            <span style={`color:${estadoStyle};`}><IconTrophy width="20" height="20" /></span>
                            <span class="font-bold">Logros obtenidos:</span> 
                            {logros_obt} / {logros_total}
                        </li>

                        <article>
                            <div class="w-full bg-gray-200 rounded-md dark:bg-gray-700">
                                <div class={`bar ${currentEstado.className} text-md font-medium text-white text-center p-0.5 py-2 leading-none rounded-md flex items-center justify-center font-mono`} style={`width: ${percentTrofeos}%;`}> {percentTrofeos}% Logros <IconPuzzle width="20" height="20" classe="ms-1" /></div>
                            </div>
                        </article>
                    </div>

                    <aside>
                        <p class="text-xl">Descripción:</p>
                        <Content />
                    </aside>

                </main>
            </div>
        </section>

        <!-- Contenedor oculto con la data de dates_played para uso en cliente -->
        <div id="dates-data" class="hidden" data-dates={JSON.stringify(dates_played)}></div>

        <section class="p-4 mx-auto max-w-screen-xl pt-8">
            <hr>
        </section>

    </main>
</Layout>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const datesElement = document.getElementById('dates-data');
        const datesData = datesElement ? JSON.parse(datesElement.dataset.dates || '{}') : {};
        const params = new URLSearchParams(window.location.search);
        const selectedYear = params.get("year") || "2025";
        const yearKey = `y${selectedYear}`;
        const fechaInicioEl = document.getElementById("fecha_inicio");
        const fechaFinalEl = document.getElementById("fecha_final");
        if (datesData[yearKey] && fechaInicioEl && fechaFinalEl) {
            fechaInicioEl.textContent = datesData[yearKey].fecha_inicio;
            fechaFinalEl.textContent = datesData[yearKey].fecha_final || "En progreso";
        }
    });
</script>

<style>
    .completadoColorBg {
        color: white;
        &.bar {
            background-color: #2973B2;
        } 
        &.icon {
            fill: #2973B2;
        }
    }
    .pausadoColorBg {
        color: white;
        &.bar {
            background-color: #FFD65A;
        }
        &.icon {
            fill: #FFD65A;
        }
    }
    .jugandoColorBg {
        color: white;
        &.bar {
            background-color: #16C47F;
        }
        &.icon {
            fill: #16C47F;
        }
    }
    .abandonadoColorBg {
        color: white;
        &.bar {
            background-color: #D84040;
        }
        &.icon {
            fill: #D84040;
        }
    }
    .defaultColorBg {
        color: white;
        &.bar {
            background-color: #333;
        }
        &.icon {
            fill: #333;
        }
    }
</style>